// Q2. Reverse LinkedList ||


class ListNode {
    int val;
    ListNode next;
    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode leftpre = dummy;
        ListNode currNode = head;
        for (int i = 0; i < left - 1; i++) {
            leftpre = leftpre.next;
            currNode = currNode.next;
        }

        ListNode subNodeHead = currNode;
        ListNode preNode = null;
        for (int i = 0; i <= right - left; i++) {
            ListNode nextNode = currNode.next;
            currNode.next = preNode;
            preNode = currNode;
            currNode = nextNode;
        }

        leftpre.next = preNode;
        subNodeHead.next = currNode;

        return dummy.next;
    }

    public void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + " -> ");
            head = head.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        // Create the list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        System.out.println("Original list:");
        sol.printList(head);

        // Reverse from position 2 to 4
        ListNode newHead = sol.reverseBetween(head, 2, 4);

        System.out.println("Modified list:");
        sol.printList(newHead);
    }
}
